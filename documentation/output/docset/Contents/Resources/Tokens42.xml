<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CSStorage.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CSStorage</TokenIdentifier>
			<Abstract type="html">Handles sensor data storage in an SQLite database</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
            
			
			<NodeRef refid="42"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/initWithPath:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (id)initWithPath:(NSString *)databaseFilePath</Declaration>
			
			
			<Anchor>//api/name/initWithPath:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/storeSensor:description:deviceType:device:dataType:value:timestamp:</TokenIdentifier>
			<Abstract type="html">Store a new sensor data point in the buffer. Note that if the db is full, 20% of rows will be removed and the function is called again.</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)storeSensor:(NSString *)sensor description:(NSString *)description deviceType:(NSString *)deviceType device:(NSString *)device dataType:(NSString *)dataType value:(NSString *)value timestamp:(double)timestamp</Declaration>
			<Parameters>
				<Parameter>
					<Name>sensor</Name>
					<Abstract type="html">Name of the sensor to store the value in</Abstract>
				</Parameter><Parameter>
					<Name>description</Name>
					<Abstract type="html">Description of the sensor</Abstract>
				</Parameter><Parameter>
					<Name>deviceType</Name>
					<Abstract type="html">Device type text</Abstract>
				</Parameter><Parameter>
					<Name>device</Name>
					<Abstract type="html">String identifier of the device</Abstract>
				</Parameter><Parameter>
					<Name>dataType</Name>
					<Abstract type="html">Don&apos;t know</Abstract>
				</Parameter><Parameter>
					<Name>value</Name>
					<Abstract type="html">Can be a JSON string or just a string representation of the value to store</Abstract>
				</Parameter><Parameter>
					<Name>timestamp</Name>
					<Abstract type="html">In seconds since 1970 representing when the value occured</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/storeSensor:description:deviceType:device:dataType:value:timestamp:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getSensorDataPointsFromId:limit:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getSensorDataPointsFromId:(long long)start limit:(size_t)limit</Declaration>
			
			
			<Anchor>//api/name/getSensorDataPointsFromId:limit:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getDataFromSensor:from:to:</TokenIdentifier>
			<Abstract type="html">Retrieve all the sensor data stored in the database between a certain time interval.</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getDataFromSensor:(NSString *)name from:(NSDate *)startDate to:(NSDate *)endDate</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the sensor to get the data from</Abstract>
				</Parameter><Parameter>
					<Name>startDate</Name>
					<Abstract type="html">The date and time at which to start looking for datapoints</Abstract>
				</Parameter><Parameter>
					<Name>endDate</Name>
					<Abstract type="html">The date and time at which to stop looking for datapoints</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an array of values, each value is a dictonary that descirbes the data point</Abstract></ReturnValue>
			<Anchor>//api/name/getDataFromSensor:from:to:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/removeDataBeforeId:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)removeDataBeforeId:(long long)rowId</Declaration>
			
			
			<Anchor>//api/name/removeDataBeforeId:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/removeDataBeforeTime:</TokenIdentifier>
			<Abstract type="html">Removes all data from before a certain date from buffer and main data store</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)removeDataBeforeTime:(NSDate *)dateThreshold</Declaration>
			<Parameters>
				<Parameter>
					<Name>dateThreshold</Name>
					<Abstract type="html">NSDate which marks the threshold, all data older than (from before) the date will be removed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeDataBeforeTime:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getLastDataPointId</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (long long)getLastDataPointId</Declaration>
			
			
			<Anchor>//api/name/getLastDataPointId</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/flush</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)flush</Declaration>
			
			
			<Anchor>//api/name/flush</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/storeSensorDescription:forSensor:description:deviceType:device:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)storeSensorDescription:(NSString *)jsonDescription forSensor:(NSString *)sensor description:(NSString *)description deviceType:(NSString *)deviceType device:(NSString *)device</Declaration>
			
			
			<Anchor>//api/name/storeSensorDescription:forSensor:description:deviceType:device:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getSensorDescriptionForSensor:description:deviceType:device:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (NSString *)getSensorDescriptionForSensor:(NSString *)sensor description:(NSString *)description deviceType:(NSString *)deviceType device:(NSString *)device</Declaration>
			
			
			<Anchor>//api/name/getSensorDescriptionForSensor:description:deviceType:device:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/trimLocalStorageTo:</TokenIdentifier>
			<Abstract type="html">Reduces nr of rows in database by removing a percentage of the oldest rows from the db and freeing up pages for new incoming data
@param: percentToKeep The percentage of rows to keep</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)trimLocalStorageTo:(double)percentToKeep</Declaration>
			
			
			<Anchor>//api/name/trimLocalStorageTo:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getDbSize</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (NSNumber *)getDbSize</Declaration>
			
			
			<Anchor>//api/name/getDbSize</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/trimLocalStorageToRowsToKeep:</TokenIdentifier>
			<Abstract type="html">Delete all rows of the database except the nrToKeep most recent rows based on id field</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)trimLocalStorageToRowsToKeep:(size_t)nrToKeep</Declaration>
			<Parameters>
				<Parameter>
					<Name>nrToKeep</Name>
					<Abstract type="html">Number of most recent rows to keep (oldest rows will be removed first)</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimLocalStorageToRowsToKeep:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/getNumberOfRowsInTable:</TokenIdentifier>
			<Abstract type="html">Queries the number of rows in the table and returns the result</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (long)getNumberOfRowsInTable:(NSString *)table</Declaration>
			<Parameters>
				<Parameter>
					<Name>table</Name>
					<Abstract type="html">Name of the table to query</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Number of rows in the table</Abstract></ReturnValue>
			<Anchor>//api/name/getNumberOfRowsInTable:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CSStorage/deleteFileWithPath:error:</TokenIdentifier>
			<Abstract type="html">Helper function to delete file on storage</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>+ (void)deleteFileWithPath:(NSString *)path error:(NSError **)err</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">file path</Abstract>
				</Parameter><Parameter>
					<Name>err</Name>
					<Abstract type="html">error</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteFileWithPath:error:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CSStorage/changeStorageEncryptionEnabled:</TokenIdentifier>
			<Abstract type="html">Change whether to use encrytion for local storage</Abstract>
			<DeclaredIn>CSStorage.h</DeclaredIn>
			
			<Declaration>- (void)changeStorageEncryptionEnabled:(BOOL)enable</Declaration>
			
			
			<Anchor>//api/name/changeStorageEncryptionEnabled:</Anchor>
            <NodeRef refid="42"/>
		</Token>
		
        
        
	</File>
</Tokens>